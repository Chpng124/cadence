module cla8bit(
    input [7:0] A,        
    input [7:0] B,        
    input Cin,            
    output [7:0] Sum,     
    output Cout           
);

wire [7:0] G, P;      
wire [7:0] C;         

assign G = A & B;            
assign P = A ^ B;             

assign C[0] = Cin;            
assign C[1] = G[0] | (P[0] & C[0]);
assign C[2] = G[1] | (P[1] & C[1]);
assign C[3] = G[2] | (P[2] & C[2]);
assign C[4] = G[3] | (P[3] & C[3]);
assign C[5] = G[4] | (P[4] & C[4]);
assign C[6] = G[5] | (P[5] & C[5]);
assign C[7] = G[6] | (P[6] & C[6]);

assign Cout = G[7] | (P[7] & C[7]);

assign Sum = P ^ C[7:0];     

endmodule




TB
---

module cla8bit_tb;

reg [7:0] A, B;        
reg Cin;              
wire [7:0] Sum;        
wire Cout;             

cla8bit uut (
    .A(A),
    .B(B),
    .Cin(Cin),
    .Sum(Sum),
    .Cout(Cout)
);

initial begin
    

    // Test Case 1
    A = 8'b00011001; B = 8'b00101101; Cin = 0;
    #10; 
   

    // Test Case 2
    A = 8'b11110000; B = 8'b00001111; Cin = 1;
    #10;    

    // Test Case 3
    A = 8'b01010101; B = 8'b10101010; Cin = 0;
    #10;     

    // Test Case 4
    A = 8'b11111111; B = 8'b11111111; Cin = 1;
    #10; 

end 
endmodule  


